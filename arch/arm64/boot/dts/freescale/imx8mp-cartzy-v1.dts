// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
/*
 * Device Tree file for Boundary Devices Nitrogen8MP SOM
 * installed on Cartzy Control Board V1.0 by ACD
 *
 * @author Nikita Bulaev agency@grovety.com
 */

/dts-v1/;

#include <dt-bindings/usb/pd.h>
#include <dt-bindings/interconnect/ti,ds90ub635.h>
#include <dt-bindings/interconnect/ti,ds90ub638.h>
#include "imx8mp-nitrogen8mp-som.dtsi"

&iomuxc {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_hog>;

	pinctrl_gpio_led: gpioledgrp {
		fsl,pins = <
		/* These pins controled by gpio-leds */
		MX8MP_IOMUXC_SAI1_TXD1__GPIO4_IO13    0x140 /* Blue CPU LED1 */
		MX8MP_IOMUXC_SAI1_TXD2__GPIO4_IO14	  0x140 /* Blue CPU LED2 */

		/* These pins controled by gpio-keys */

#define GP_CPU_LED3	<&gpio4 15 GPIO_ACTIVE_HIGH>
		MX8MP_IOMUXC_SAI1_TXD3__GPIO4_IO15	  0x100 /* Blue CPU LED3 */
		>;
	};

	pinctrl_ecspi2: ecspi2grp {
		fsl,pins = <
			/* J31 */
			MX8MP_IOMUXC_ECSPI2_SCLK__ECSPI2_SCLK		0x82	/* Pin 20 */
			MX8MP_IOMUXC_ECSPI2_MOSI__ECSPI2_MOSI		0x82	/* Pin 10 */
			MX8MP_IOMUXC_ECSPI2_MISO__ECSPI2_MISO		0x82	/* Pin 8 */
#define GP_ECSPI2_CS	<&gpio5 13 GPIO_ACTIVE_LOW>
			MX8MP_IOMUXC_ECSPI2_SS0__GPIO5_IO13		0x143	/* Pin 6 */
		>;
	};

	pinctrl_hog: hoggrp {
		fsl,pins = <
			MX8MP_IOMUXC_HDMI_DDC_SCL__HDMIMIX_HDMI_SCL	0x400001c3
			MX8MP_IOMUXC_HDMI_DDC_SDA__HDMIMIX_HDMI_SDA	0x400001c3
			MX8MP_IOMUXC_HDMI_HPD__HDMIMIX_HDMI_HPD		0x40000019
			MX8MP_IOMUXC_HDMI_CEC__HDMIMIX_HDMI_CEC		0x40000019
			MX8MP_IOMUXC_NAND_DATA01__GPIO3_IO07		0x119
			/* J31 */
			MX8MP_IOMUXC_SPDIF_RX__GPIO5_IO04		0x41	/* Pin 17 */
			MX8MP_IOMUXC_SPDIF_EXT_CLK__GPIO5_IO05	0x41	/* Pin 19 */
			MX8MP_IOMUXC_SPDIF_TX__GPIO5_IO03		0x41	/* Pin 21 */
			MX8MP_IOMUXC_SAI1_MCLK__GPIO4_IO20		0x16	/* Pin 2 */
			MX8MP_IOMUXC_SAI1_TXD7__GPIO4_IO19		0x1c4	/* Pin 4 */

#define WM_RESET_CTRL	<&gpio4 16 GPIO_ACTIVE_HIGH>
			MX8MP_IOMUXC_SAI1_TXD4__GPIO4_IO16	0x100

#define CAM_POWER_CTRL	<&gpio4 18 GPIO_ACTIVE_HIGH>
			MX8MP_IOMUXC_SAI1_TXD6__GPIO4_IO18	0x1c0
		>;
	};

/*	pinctrl_i2c2_pca9546: i2c2-pca9546grp {
		fsl,pins = <
#define GP_PCA9546_RESET	<&gpio1 5 GPIO_ACTIVE_LOW>
			MX8MP_IOMUXC_GPIO1_IO05__GPIO1_IO05        	0x100
		>;
	};*/

	pinctrl_pdm: pdmgrp {
		fsl,pins = <
			MX8MP_IOMUXC_SAI1_RXC__AUDIOMIX_PDM_CLK			0xd6
			MX8MP_IOMUXC_SAI3_RXFS__AUDIOMIX_PDM_BIT_STREAM00	0xd6
		>;
	};

	pinctrl_pwm4: pwm4grp {
		fsl,pins = <
			/* J31, pin 36 */
			MX8MP_IOMUXC_SAI5_RXFS__PWM4_OUT	0x116
		>;
	};

	pinctrl_reg_usbotg_vbus: reg-usbotg-vbusgrp {
		fsl,pins = <
#define GP_REG_USB_OTG_VBUS	<&gpio1 12 GPIO_ACTIVE_HIGH>
			MX8MP_IOMUXC_GPIO1_IO12__GPIO1_IO12	0x100
		>;
	};

	pinctrl_uart2: uart2grp {
		fsl,pins = <
			MX8MP_IOMUXC_UART2_RXD__UART2_DCE_RX	0x140
			MX8MP_IOMUXC_UART2_TXD__UART2_DCE_TX	0x140
		>;
	};

	pinctrl_uart3: uart3grp {
		fsl,pins = <
			MX8MP_IOMUXC_ECSPI1_SCLK__UART3_DCE_RX	0x140
			MX8MP_IOMUXC_ECSPI1_MOSI__UART3_DCE_TX	0x140
		>;
	};

	pinctrl_uart4: uart4grp {
		fsl,pins = <
			MX8MP_IOMUXC_UART4_RXD__UART4_DCE_RX	0x140
			MX8MP_IOMUXC_UART4_TXD__UART4_DCE_TX	0x140
		>;
	};

	pinctrl_usdhc1: usdhc1grp {
		fsl,pins = <
		MX8MP_IOMUXC_SD1_CLK__USDHC1_CLK    0x190
		MX8MP_IOMUXC_SD1_CMD__USDHC1_CMD    0x1d0
		MX8MP_IOMUXC_SD1_DATA0__USDHC1_DATA0    0x1d0
		MX8MP_IOMUXC_SD1_DATA1__USDHC1_DATA1    0x1d0
		MX8MP_IOMUXC_SD1_DATA2__USDHC1_DATA2    0x1d0
		MX8MP_IOMUXC_SD1_DATA3__USDHC1_DATA3    0x1d0
		MX8MP_IOMUXC_SD1_DATA4__USDHC1_DATA4    0x1d0
		MX8MP_IOMUXC_SD1_DATA5__USDHC1_DATA5    0x1d0
		MX8MP_IOMUXC_SD1_DATA6__USDHC1_DATA6    0x1d0
		MX8MP_IOMUXC_SD1_DATA7__USDHC1_DATA7    0x1d0
		/*MX8MP_IOMUXC_GPIO1_IO03__USDHC1_VSELECT    0x116*/
		MX8MP_IOMUXC_SD1_STROBE__USDHC1_STROBE    0x10
		MX8MP_IOMUXC_SD1_RESET_B__USDHC1_RESET_B 0x140
		>;
	};

	pinctrl_usdhc1_100mhz: usdhc1grp-100mhz {
		fsl,pins = <
		MX8MP_IOMUXC_SD1_CLK__USDHC1_CLK    0x194
		MX8MP_IOMUXC_SD1_CMD__USDHC1_CMD    0x1d4
		MX8MP_IOMUXC_SD1_DATA0__USDHC1_DATA0    0x1d4
		MX8MP_IOMUXC_SD1_DATA1__USDHC1_DATA1    0x1d4
		MX8MP_IOMUXC_SD1_DATA2__USDHC1_DATA2    0x1d4
		MX8MP_IOMUXC_SD1_DATA3__USDHC1_DATA3    0x1d4
		MX8MP_IOMUXC_SD1_DATA4__USDHC1_DATA4    0x1d4
		MX8MP_IOMUXC_SD1_DATA5__USDHC1_DATA5    0x1d4
		MX8MP_IOMUXC_SD1_DATA6__USDHC1_DATA6    0x1d4
		MX8MP_IOMUXC_SD1_DATA7__USDHC1_DATA7    0x1d4
		MX8MP_IOMUXC_SD1_STROBE__USDHC1_STROBE  0x14
		>;
	};

	pinctrl_usdhc1_200mhz: usdhc1grp-200mhz {
		fsl,pins = <
		MX8MP_IOMUXC_SD1_CLK__USDHC1_CLK    0x196
		MX8MP_IOMUXC_SD1_CMD__USDHC1_CMD    0x1d6
		MX8MP_IOMUXC_SD1_DATA0__USDHC1_DATA0    0x1d6
		MX8MP_IOMUXC_SD1_DATA1__USDHC1_DATA1    0x1d6
		MX8MP_IOMUXC_SD1_DATA2__USDHC1_DATA2    0x1d6
		MX8MP_IOMUXC_SD1_DATA3__USDHC1_DATA3    0x1d6
		MX8MP_IOMUXC_SD1_DATA4__USDHC1_DATA4    0x1d6
		MX8MP_IOMUXC_SD1_DATA5__USDHC1_DATA5    0x1d6
		MX8MP_IOMUXC_SD1_DATA6__USDHC1_DATA6    0x1d6
		MX8MP_IOMUXC_SD1_DATA7__USDHC1_DATA7    0x1d6
		MX8MP_IOMUXC_SD1_STROBE__USDHC1_STROBE  0x12
		>;
	};

	/* No GPIO pins for camera
	pinctrl_i2c3_ov5695_mipi: i2c3-ov5695-mipigrp {
		fsl,pins = <>;
	};*/

	/* No GPIO pins for camera
	pinctrl_i2c4_ov5695_mipi: i2c4-ov5695-mipigrp {
		fsl,pins = <

		>;
	};
	*/

	pinctrl_i2c3_tof: i2c3_tofgrp {
		fsl,pins = <
		/* TOF 1/2 INT - Input, trigger on falling GPIO0 */
#define GP_TOF_INT1_2	<&gpio1 4 IRQ_TYPE_LEVEL_LOW>
		MX8MP_IOMUXC_GPIO1_IO04__GPIO1_IO04	0x166

		/* TOF 1 SYNC GPIO1 */
#define GP_TOF_SYNC1	<&gpio1 10 GPIO_ACTIVE_HIGH>
		MX8MP_IOMUXC_GPIO1_IO10__GPIO1_IO10	0x116

		/* TOF 1 RESET GPIO2 */
#define GP_TOF_RESET1  <&gpio1 13 GPIO_ACTIVE_HIGH>
		MX8MP_IOMUXC_GPIO1_IO13__GPIO1_IO13	0x106
		>;
	};

	pinctrl_i2c4_tof: i2c4_tofgrp {
		fsl,pins = <
		/* TOF 3/4 INT - Input, trigger on falling GPIO0 */
#define GP_TOF_INT3_4	<&gpio1 5 IRQ_TYPE_LEVEL_LOW>
		MX8MP_IOMUXC_GPIO1_IO05__GPIO1_IO05	0x166

		/* TOF 3 SYNC GPIO1 */
#define GP_TOF_SYNC3	<&gpio1 6 GPIO_ACTIVE_HIGH>
		MX8MP_IOMUXC_GPIO1_IO06__GPIO1_IO06	0x116

		/* TOF 3 RESET GPIO2 */
#define GP_TOF_RESET3	<&gpio1 8 GPIO_ACTIVE_HIGH>
		MX8MP_IOMUXC_GPIO1_IO08__GPIO1_IO08	0x106
		>;
	};
};

&pinctrl_i2c3_tof {
	/* TOF 2 SYNC GPIO3 */
	tof_sync2_open_drain: tof_sync2_open_drain {
		fsl,pins = <
#define GP_TOF_SYNC2    <&gpio1 7 (GPIO_ACTIVE_HIGH | GPIO_OPEN_DRAIN)>
		MX8MP_IOMUXC_GPIO1_IO07__GPIO1_IO07    0x030 /* OpenDrain output */
		>;
        drive-open-source; /* Also force open source */
    };
};

&pinctrl_i2c4_tof {
	/* TOF 4 SYNC GPIO3 */
	tof_sync4_open_drain: tof_sync4_open_drain {
		fsl,pins = <
#define GP_TOF_SYNC4    <&gpio1 14 (GPIO_ACTIVE_HIGH | GPIO_OPEN_DRAIN)>
		MX8MP_IOMUXC_GPIO1_IO14__GPIO1_IO14    0x030 /* OpenDrain output */
		>;
		drive-open-source; /* Also force open source */
	};
};

/ {
	model = "Ezurio i.MX8MPlus SOM + ACD Cartzy board V1.0";
	compatible = "fsl,imx8mp-custom-board", "boundary,imx8mp-nitrogen8mp", "fsl,imx8mp";

	aliases {
		fb_hdmi = &lcdif3;
	};

	chosen {
		stdout-path = &uart2;
	};

	gpio-leds {
		compatible = "gpio-leds";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_gpio_led>;

		status {
			label = "green: status";
			gpios = <&gpio4 13 GPIO_ACTIVE_HIGH>;
			default-state = "on";
			linux,default-trigger = "heartbeat";
		};

		activity_led {
			label = "mmc-activity";
			gpios = <&gpio4 14 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "mmc2";
		};
	};

	gpio_keys: gpio-keys {
		compatible = "gpio-keys";
		pinctrl-names = "default";
	};

	sound_hdmi: sound-hdmi {
		compatible = "fsl,imx-audio-hdmi";
		model = "audio-hdmi";
		audio-cpu = <&aud2htx>;
		hdmi-out;
		constraint-rate = <44100>,
				<88200>,
				<176400>,
				<32000>,
				<48000>,
				<96000>,
				<192000>;
		status = "disabled";
	};

	sound-wm8960 {
		status = "disabled";
	};

	csi_mclk: csi-mclk {
		compatible = "fixed-clock";
		#clock-cells = <0>;
		clock-frequency = <24000000>;
		clock-output-names = "csi_mclk";
		status = "okay";
	};

	reg_vref_1v2: regulator-vref-1v2 {
		compatible = "regulator-fixed";
		regulator-name = "vref-1v2";
		regulator-min-microvolt = <1200000>;
		regulator-max-microvolt = <1200000>;
	};

	reg_vref_2v8: regulator-vref-2v8 {
		compatible = "regulator-fixed";
		regulator-name = "vref-2v8";
		regulator-min-microvolt = <2800000>;
		regulator-max-microvolt = <2800000>;
	};
};

&aud2htx {
	status = "disabled";
};

&cameradev {
	status = "okay";
};

&isi_0 {
	status = "disabled";

	m2m_device {
		status = "disabled";
	};
};

&isi_1 {
	status = "disabled";
};

&dewarp {
	status = "okay";
};

&dsp {
	status = "okay";
};

&easrc {
	status = "disabled";
};

&ecspi2 {
	#address-cells = <1>;
	#size-cells = <0>;
	fsl,spi-num-chipselects = <1>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_ecspi2>;
	cs-gpios = GP_ECSPI2_CS;
	status = "okay";

	spidev1: spi@0 {
		compatible = "spidev";
		reg = <0>;
		spi-max-frequency = <500000>;
	};
};

&fec {
	status = "disabled";
};

&eqos {
	status = "disabled";
};

&flexcan1 {
	status = "disabled";
};

&flexcan2 {
	status = "disabled";
};

&hdmi {
	status = "okay";
};

&hdmiphy {
	status = "okay";
};

&hdmi_blk_ctrl {
	status = "okay";
};

&hdmi_pavi {
	status = "okay";
};

&i2c2 {
	pca9546: i2cmux9546@70 {
		// pinctrl-names = "default";
		// pinctrl-0 = <&pinctrl_i2c2_pca9546>;
		compatible = "nxp,pca9546";
		reg = <0x70>;
		// reset-gpios = GP_PCA9546_RESET;
		#address-cells = <1>;
		#size-cells = <0>;

		i2c2a: i2c2@0 {
			clock-frequency = <100000>;
			reg = <0>;
			#address-cells = <1>;
			#size-cells = <0>;

			/* Battery module I2C */
		};

		i2c2b: i2c2@1 {
			clock-frequency = <100000>;
			reg = <1>;
			#address-cells = <1>;
			#size-cells = <0>;

			/* Weight module #1 I2C  */
			wm1@60 {
				compatible = "generic-i2c-device";
				reg = <0x60>;
			};
		};

		i2c2c: i2c2@2 {
			clock-frequency = <100000>;
			reg = <2>;
			#address-cells = <1>;
			#size-cells = <0>;

			/* Weight module #2 I2C  */
			wm2@60 {
				compatible = "generic-i2c-device";
				reg = <0x60>;
			};
		};

		i2c2d: i2c2@3 {
			clock-frequency = <100000>;
			reg = <3>;
			#address-cells = <1>;
			#size-cells = <0>;

			/* Display I2C */
		};
	};
};

&i2c2a {
	status = "disabled";
};

&i2c2b {
	status = "okay";
};

&i2c2c {
	status = "okay";
};

&i2c2d {
	status = "disabled";
};

&i2c3 {
	status = "okay";
	clock-frequency = <400000>;
	pinctrl-names = "default";

	/* DS90UB638 deserializer */
	ds90ub638_0@30 {
		compatible = "custom,i2c-device";
		reg = <0x30>;
		#address-cells = <1>;
		#size-cells = <0>;

		/*pinctrl-0 = <&pinctrl_ds90ub638_1>;		*/

		release-after-config = <1>;		// Release device after configuration

		init-regs {
			reg@0 {
				address = <TI_DS90UB638_RX_PORT_CTL_REG>;
				mask = <TI_DS90UB638_RX_PORT_CTL_STARTUP_BIT_MASK>;
				value = <TI_DS90UB638_RX_PORT_CTL_STARTUP_BIT_SET>;
				operation = "setbits";
			};
			reg@1 {
				address = <TI_DS90UB638_FWD_CTL2_REG>;
				mask = <TI_DS90UB638_FWD_CTL2_FWD_SYNC_AS_AVAIL_MASK>;
				value = <TI_DS90UB638_FWD_CTL2_FWD_SYNC_AS_AVAIL>;
				operation = "setbits";
			};
			reg@2 {
				address = <TI_DS90UB638_GENERAL_CFG_REG>;
				value = <(TI_DS90UB638_GENERAL_CFG_I2C_CONTROLLER_ENABLE |
							TI_DS90UB638_GENERAL_CFG_OUTPUT_EN_MODE |
							TI_DS90UB638_GENERAL_CFG_OUTPUT_ENABLE |
							TI_DS90UB638_GENERAL_CFG_OUTPUT_SLEEP_STATE_SELECT |
							TI_DS90UB638_GENERAL_CFG_RX_PARITY_CHECKER_ENABLE)>;
				operation = "overwrite";
			};
			reg@3 {
				address = <TI_DS90UB638_FPD3_PORT_SEL_REG>;
				value = <TI_DS90UB638_FPD3_PORT_SEL_RX_WRITE_PORT_0_EN>;
				operation = "overwrite";
			};
			reg@4 {
				address = <TI_DS90UB638_BCC_CONFIG_REG>;
				value = <(TI_DS90UB638_BCC_CONFIG_I2C_PASS_THROUGH_ALL_EN |
							TI_DS90UB638_BCC_CONFIG_BC_ALWAYS_ON_EN |
							TI_DS90UB638_BCC_CONFIG_BC_CRC_GENERATOR_ENABLE_EN|
							TI_DS90UB638_BCC_CONFIG_BC_FREQ_SELECT_50MBPS)>;
				operation = "overwrite";
			};
			reg@5 {
				address = <TI_DS90UB638_FWD_CTL1_REG>;
				mask = <TI_DS90UB638_FWD_CTL1_FWD_PORT0_MASK>;
				value = <TI_DS90UB638_FWD_CTL1_FWD_PORT0_EN>;
				operation = "setbits";
			};
			reg@6 {
				// Turn on GPIOs transfer
				address = <TI_DS90UB638_DATAPATH_CTL1_REG>;
				value = <TI_DS90UB638_DATAPATH_CTL1_FC_GPIO_EN_FOUR>;
				operation = "overwrite";
			};
			reg@7 {
				// GPIO1/2/3 - Inputs, this reg must me set first
				address = <TI_DS90UB638_GPIO_INPUT_CTL_REG>;
				value = <(TI_DS90UB638_GPIO_INPUT_CTL_GPIO1_EN |
							TI_DS90UB638_GPIO_INPUT_CTL_GPIO2_EN |
							TI_DS90UB638_GPIO_INPUT_CTL_GPIO3_EN)>;
				operation = "overwrite";
			};
			reg@8 {
				// GPIO0 - Output (ToF INTR)
				address = <TI_DS90UB638_GPIO0_PIN_CTL_REG>;
				value = <TI_DS90UB638_GPIOx_PIN_CTL_OUT_EN>;
				operation = "overwrite";
			};
			reg@10 {
				// GPIO1 - Input (ToF1/2 SYNC)
				address = <TI_DS90UB638_GPIO1_PIN_CTL_REG>;
				value = <TI_DS90UB638_GPIOx_PIN_CTL_OUT_DISABLE>;
				operation = "overwrite";
			};
			reg@11 {
				// GPIO2 - Input (ToF/Camera RESET)
				address = <TI_DS90UB638_GPIO2_PIN_CTL_REG>;
				value = <TI_DS90UB638_GPIOx_PIN_CTL_OUT_DISABLE>;
				operation = "overwrite";
			};
			reg@12 {
				// GPIO3 - Input (ToF3/4 SYNC)
				address = <TI_DS90UB638_GPIO3_PIN_CTL_REG>;
				value = <TI_DS90UB638_GPIOx_PIN_CTL_OUT_DISABLE>;
				operation = "overwrite";
			};
			reg@13 {
				// GPIO1 - data sent on GPIO1 for the port back channel. GPIO0 - DOWN
				address = <TI_DS90UB638_BC_GPIO_CTL0_REG>;
				value = <(TI_DS90UB638_BC_GPIO_GPIO1_SEL_GPIO1 | TI_DS90UB638_BC_GPIO_GPIO0_SEL_VAL0)>;
				operation = "overwrite";
			};
			reg@14 {
				// GPIO3 - data sent on GPIO3 for the port back channel, GPIO2 DOWN.
				address = <TI_DS90UB638_BC_GPIO_CTL1_REG>;
				value = <(TI_DS90UB638_BC_GPIO_GPIO3_SEL_GPIO3 | TI_DS90UB638_BC_GPIO_GPIO2_SEL_VAL0)>;
				operation = "overwrite";
			};
			reg@15 {
				// Turn on CSI and setup 2-lanes
				address = <TI_DS90UB638_CSI_CTL_REG>;
				value = <(TI_DS90UB638_CSI_CTL_CSI_LANE_COUNT_2 | TI_DS90UB638_CSI_CTL_CSI_EN)>;
				operation = "overwrite";
			};
		};
	};

	/* DS90UB635 serializer */
	ds90ub635_0@18 {
		compatible = "custom,i2c-device";
		reg = <0x18>;

		// Wait for ready flag from deserializer
		ready-flag-wait = "/sys/bus/i2c/devices/2-0030/ready_flag";

		release-after-config = <1>;    	// Release device after configuration

		init-regs {
			reg@0 {
				address = <TI_DS90UB635_GENERAL_CFG_REG>;
				value = <(TI_DS90UB635_GENERAL_CFG_CSI_SEL_2_LANE |
							TI_DS90UB635_GENERAL_CFG_CRC_TX_GEN_ENABLE |
							TI_DS90UB635_GENERAL_CFG_I2C_STRAP_MODE_1V8)>;
				operation = "overwrite";
			};
			reg@1 {
				// GPIO0 - Inputs (ToFs INTR), GPIO1/2/3 - Output (ToF1 SYNC, ToF/Camera RESET, ToF2 SYNC)
				address = <TI_DS90UB635_GPIO_INPUT_CTRL_REG>;
				value = <(TI_DS90UB635_GPIO_INPUT_CTRL_GPIO0_IN_EN |
							TI_DS90UB635_GPIO_INPUT_CTRL_GPIO1_OUT_EN |
							TI_DS90UB635_GPIO_INPUT_CTRL_GPIO2_OUT_EN |
							TI_DS90UB635_GPIO_INPUT_CTRL_GPIO3_OUT_EN)>;
				operation = "overwrite";
			};
			reg@2 {
				// Turn on GPIOs transfer
				address = <TI_DS90UB635_DATAPATH_CTL1_REG>;
				value = <(TI_DS90UB635_DATAPATH_CTL1_DCA_CRC_EN | TI_DS90UB635_DATAPATH_CTL1_FC_GPIO_EN_ONE)>;
				operation = "overwrite";
			};
		};
	};

	/* Camera led control */
	cam_led_ctrl_0@54 {
		compatible = "generic-i2c-device";
		reg = <0x54>;
	};

	/* Tof sensor #1 */
	stmvl53l8cx1_0: stmvl53l8cx_0@29 {
		// Will modprobe from udev script later
		compatible = "st,stmvl53l8cx";
		reg = <0x29>;
		dev-name = "stmvl53l8cx_1";
		pinctrl-0 = <&pinctrl_i2c3_tof>;
		// int-gpios = GP_TOF_INT1_2;
		sync-gpios = GP_TOF_SYNC1;
		sync-drive = "push-pull";
		status = "okay";
	};

	/* Tof sensor #2 */
	stmvl53l8cx1_1: stmvl53l8cx_1@28 {
		// Will modprobe from udev script later
		compatible = "st,stmvl53l8cx";
		reg = <0x28>;
		dev-name = "stmvl53l8cx_2";
		pinctrl-0 = <&pinctrl_i2c3_tof>;
		sync-gpios = GP_TOF_SYNC2;
		sync-drive = "open-drain";
		status = "okay";
	};

	ov5695: ov5695_mipi0@36 {
		avdd-supply = <&reg_vref_2v8>;
		dovdd-supply = <&reg_vref_1v8>;
		dvdd-supply = <&reg_vref_1v2>;
		clocks = <&csi_mclk>;
		clock-names = "xvclk";
		compatible = "ovti,ov5695", "ov5695";
		/*pinctrl-names = "default";*/
		/*pinctrl-0 = <&pinctrl_i2c3_ov5695_mipi>;*/ // No GPIO pins for camera
		reg = <0x36>;
		csi_id = <0>;
		/*reset-gpios = GP_OV5695_MIPI0_RESET;*/ // Used for ToF I2C block
		status = "okay";

		ready-flag-wait = "/sys/bus/i2c/devices/2-0018/ready_flag"; // Wait for ready flag

		port {
			ov5695_mipi0_ep: endpoint {
				clock-lanes = <0>;
				data-lanes = <1 2>;
				remote-endpoint = <&mipi0_ov5695_ep>;
				link-frequencies = /bits/ 64 <800000000>;

				max-lane-frequency = /bits/ 64 <800000000>;
				max-pixel-frequency = /bits/ 64 <266000000>;
			};
		};
	};
};

&i2c4 {
	status = "okay";
	clock-frequency = <400000>;
	pinctrl-names = "default";

	/* DS90UB638 deserializer */
	ds90ub638_0@30 {
		compatible = "custom,i2c-device";
		reg = <0x30>;
		#address-cells = <1>;
		#size-cells = <0>;

		/*pinctrl-0 = <&pinctrl_ds90ub638_1>;        */

		init-regs {
			reg@0 {
				address = <TI_DS90UB638_RX_PORT_CTL_REG>;
				mask = <TI_DS90UB638_RX_PORT_CTL_STARTUP_BIT_MASK>;
				value = <TI_DS90UB638_RX_PORT_CTL_STARTUP_BIT_SET>;
				operation = "setbits";
			};
			reg@1 {
				address = <TI_DS90UB638_FWD_CTL2_REG>;
				mask = <TI_DS90UB638_FWD_CTL2_FWD_SYNC_AS_AVAIL_MASK>;
				value = <TI_DS90UB638_FWD_CTL2_FWD_SYNC_AS_AVAIL>;
				operation = "setbits";
			};
			reg@2 {
				address = <TI_DS90UB638_GENERAL_CFG_REG>;
				value = <(TI_DS90UB638_GENERAL_CFG_I2C_CONTROLLER_ENABLE |
				TI_DS90UB638_GENERAL_CFG_OUTPUT_EN_MODE |
				TI_DS90UB638_GENERAL_CFG_OUTPUT_ENABLE |
				TI_DS90UB638_GENERAL_CFG_OUTPUT_SLEEP_STATE_SELECT |
				TI_DS90UB638_GENERAL_CFG_RX_PARITY_CHECKER_ENABLE)>;
				operation = "overwrite";
			};
			reg@3 {
				address = <TI_DS90UB638_FPD3_PORT_SEL_REG>;
				value = <TI_DS90UB638_FPD3_PORT_SEL_RX_WRITE_PORT_0_EN>;
				operation = "overwrite";
			};
			reg@4 {
				address = <TI_DS90UB638_BCC_CONFIG_REG>;
				value = <(TI_DS90UB638_BCC_CONFIG_I2C_PASS_THROUGH_ALL_EN |
				TI_DS90UB638_BCC_CONFIG_BC_ALWAYS_ON_EN |
				TI_DS90UB638_BCC_CONFIG_BC_CRC_GENERATOR_ENABLE_EN|
				TI_DS90UB638_BCC_CONFIG_BC_FREQ_SELECT_50MBPS)>;
				operation = "overwrite";
			};
			reg@5 {
				address = <TI_DS90UB638_FWD_CTL1_REG>;
				mask = <TI_DS90UB638_FWD_CTL1_FWD_PORT0_MASK>;
				value = <TI_DS90UB638_FWD_CTL1_FWD_PORT0_EN>;
				operation = "setbits";
			};
			reg@6 {
				// Turn on GPIOs transfer
				address = <TI_DS90UB638_DATAPATH_CTL1_REG>;
				value = <TI_DS90UB638_DATAPATH_CTL1_FC_GPIO_EN_FOUR>;
				operation = "overwrite";
			};
			reg@7 {
				// GPIO1/2/3 - Inputs, this reg must me set first
				address = <TI_DS90UB638_GPIO_INPUT_CTL_REG>;
				value = <(TI_DS90UB638_GPIO_INPUT_CTL_GPIO1_EN |
				TI_DS90UB638_GPIO_INPUT_CTL_GPIO2_EN |
				TI_DS90UB638_GPIO_INPUT_CTL_GPIO3_EN)>;
				operation = "overwrite";
			};
			reg@8 {
				// GPIO0 - Output (ToF INTR)
				address = <TI_DS90UB638_GPIO0_PIN_CTL_REG>;
				value = <TI_DS90UB638_GPIOx_PIN_CTL_OUT_EN>;
				operation = "overwrite";
			};
			reg@10 {
				// GPIO1 - Input (ToF1/2 SYNC)
				address = <TI_DS90UB638_GPIO1_PIN_CTL_REG>;
				value = <TI_DS90UB638_GPIOx_PIN_CTL_OUT_DISABLE>;
				operation = "overwrite";
			};
			reg@11 {
				// GPIO2 - Input (ToF/Camera RESET)
				address = <TI_DS90UB638_GPIO2_PIN_CTL_REG>;
				value = <TI_DS90UB638_GPIOx_PIN_CTL_OUT_DISABLE>;
				operation = "overwrite";
			};
			reg@12 {
				// GPIO3 - Input (ToF3/4 SYNC)
				address = <TI_DS90UB638_GPIO3_PIN_CTL_REG>;
				value = <TI_DS90UB638_GPIOx_PIN_CTL_OUT_DISABLE>;
				operation = "overwrite";
			};
			reg@13 {
				// GPIO1 - data sent on GPIO1 for the port back channel. GPIO0 - DOWN
				address = <TI_DS90UB638_BC_GPIO_CTL0_REG>;
				value = <(TI_DS90UB638_BC_GPIO_GPIO1_SEL_GPIO1 | TI_DS90UB638_BC_GPIO_GPIO0_SEL_VAL0)>;
				operation = "overwrite";
			};
			reg@14 {
				// GPIO3 - data sent on GPIO3 for the port back channel, GPIO2 DOWN.
				address = <TI_DS90UB638_BC_GPIO_CTL1_REG>;
				value = <(TI_DS90UB638_BC_GPIO_GPIO3_SEL_GPIO3 | TI_DS90UB638_BC_GPIO_GPIO2_SEL_VAL0)>;
				operation = "overwrite";
			};
			reg@15 {
				// Turn on CSI and setup 2-lanes
				address = <TI_DS90UB638_CSI_CTL_REG>;
				value = <(TI_DS90UB638_CSI_CTL_CSI_LANE_COUNT_2 | TI_DS90UB638_CSI_CTL_CSI_EN)>;
				operation = "overwrite";
			};
		};
	};

	/* DS90UB635 serializer */
	ds90ub635_0@18 {
		compatible = "custom,i2c-device";
		reg = <0x18>;

		// Wait for ready flag from deserializer
		ready-flag-wait = "/sys/bus/i2c/devices/3-0030/ready_flag";

		init-regs {
			reg@0 {
				address = <TI_DS90UB635_GENERAL_CFG_REG>;
				value = <(TI_DS90UB635_GENERAL_CFG_CSI_SEL_2_LANE |
				TI_DS90UB635_GENERAL_CFG_CRC_TX_GEN_ENABLE |
				TI_DS90UB635_GENERAL_CFG_I2C_STRAP_MODE_1V8)>;
				operation = "overwrite";
			};
			reg@1 {
				// GPIO0 - Inputs (ToFs INTR), GPIO1/2/3 - Output (ToF1 SYNC, ToF/Camera RESET, ToF2 SYNC)
				address = <TI_DS90UB635_GPIO_INPUT_CTRL_REG>;
				value = <(TI_DS90UB635_GPIO_INPUT_CTRL_GPIO0_IN_EN |
				TI_DS90UB635_GPIO_INPUT_CTRL_GPIO1_OUT_EN |
				TI_DS90UB635_GPIO_INPUT_CTRL_GPIO2_OUT_EN |
				TI_DS90UB635_GPIO_INPUT_CTRL_GPIO3_OUT_EN)>;
				operation = "overwrite";
			};
			reg@2 {
				// Turn on GPIOs transfer
				address = <TI_DS90UB635_DATAPATH_CTL1_REG>;
				value = <(TI_DS90UB635_DATAPATH_CTL1_DCA_CRC_EN | TI_DS90UB635_DATAPATH_CTL1_FC_GPIO_EN_ONE)>;
				operation = "overwrite";
			};
		};
	};

	/* Camera led control */
	cam_led_ctrl_0@54 {
		compatible = "generic-i2c-device";
		reg = <0x54>;
	};

	/* Tof sensor #1 */
	stmvl53l8cx2_0: stmvl53l8cx_0@29 {
		compatible = "st,stmvl53l8cx";
		reg = <0x29>;
		dev-name = "stmvl53l8cx_3";
		/*pinctrl-names = "default";*/
		pinctrl-0 = <&pinctrl_i2c4_tof>;
		// int-gpios = GP_TOF_INT3_4;
		sync-gpios = GP_TOF_SYNC3;
		sync-drive = "push-pull";
		status = "okay";
	};

	/* Tof sensor #2 */
	stmvl53l8cx2_1: stmvl53l8cx_1@28 {
		compatible = "st,stmvl53l8cx";
		reg = <0x28>;
		dev-name = "stmvl53l8cx_4";
		pinctrl-0 = <&pinctrl_i2c4_tof>;
		sync-gpios = GP_TOF_SYNC4;
		sync-drive = "open-drain";
		status = "okay";
	};

	ov5695_2: ov5695_mipi1@36 {
		avdd-supply = <&reg_vref_2v8>;
		dovdd-supply = <&reg_vref_1v8>;
		dvdd-supply = <&reg_vref_1v2>;
		clocks = <&csi_mclk>;
		clock-names = "xvclk";
		compatible = "ovti,ov5695", "ov5695";
		/*pinctrl-names = "default";*/
		/*pinctrl-0 = <&pinctrl_i2c4_ov5695_mipi>;*/ // No GPIO pins for camera
		reg = <0x36>;
		csi_id = <1>;
		/*reset-gpios = GP_OV5695_MIPI1_RESET;*/ // Used for ToF I2C block
		status = "okay";

		port {
			ov5695_mipi1_ep: endpoint {
				clock-lanes = <0>;
				data-lanes = <1 2>;
				remote-endpoint = <&mipi1_ov5695_ep>;
				link-frequencies = /bits/ 64 <800000000>;

				max-lane-frequency = /bits/ 64 <800000000>;
				max-pixel-frequency = /bits/ 64 <266000000>;
			};
		};
	};
};

&irqsteer_hdmi {
	status = "okay";
};

&isp_0 {
	status = "okay";
};

&isp_1 {
	status = "okay";
};

&micfil {
	status = "disabled";
};

&mipi_csi_0 {
	#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";
	clock-frequency = <266000000>;
	assigned-clock-parents = <&clk IMX8MP_SYS_PLL1_266M>;
	assigned-clock-rates = <266000000>;
	bus-width = <2>;

	port@0 {
		reg = <0>;

		mipi0_ov5695_ep: endpoint {
			remote-endpoint = <&ov5695_mipi0_ep>;
			data-lanes = <2>;
			csis-hs-settle = <13>;
			csis-clk-settle = <2>;
			csis-wclk;
		};
	};
};

&mipi_csi_1 {
	#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";
	clock-frequency = <266000000>;
	assigned-clock-parents = <&clk IMX8MP_SYS_PLL1_266M>;
	assigned-clock-rates = <266000000>;
	bus-width = <2>;

	port@1 {
		reg = <1>;

		mipi1_ov5695_ep: endpoint {
			remote-endpoint = <&ov5695_mipi1_ep>;
			data-lanes = <2>;
			csis-hs-settle = <13>;
			csis-clk-settle = <2>;
			csis-wclk;
		};
	};
};

&mix_gpu_ml {
	status = "okay";
};

&ml_vipsi {
	status = "okay";
};

&pcie {
	status = "disabled";
};

&pcie_phy {
	status = "disabled";
};

&pwm4 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_pwm4>;
	status = "disabled";
};

&sai3 {
	status = "disabled";
};

&uart2 {
	/* console */
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart2>;
	status = "okay";
};

&uart3 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart3>;
	assigned-clocks = <&clk IMX8MP_CLK_UART3>;
	assigned-clock-parents = <&clk IMX8MP_SYS_PLL1_80M>;
	status = "okay";
};

&uart4 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart4>;
	assigned-clocks = <&clk IMX8MP_CLK_UART4>;
	assigned-clock-parents = <&clk IMX8MP_SYS_PLL1_80M>;
	status = "okay";
};

/delete-node/ &usb3_0;
/delete-node/ &usb3_1;
/delete-node/ &usb3_phy0;
/delete-node/ &usb3_phy1;

&usdhc1 {
	status = "okay";
	non-removable;
	bus-width = <8>;
	pinctrl-names = "default", "state_100mhz", "state_200mhz";
	pinctrl-0 = <&pinctrl_usdhc1>;
	pinctrl-1 = <&pinctrl_usdhc1_100mhz>;
	pinctrl-2 = <&pinctrl_usdhc1_200mhz>;
	vmmc-supply = <&reg_vref_3v3>;
	vqmmc-1-8-v;
	vqmmc-supply = <&reg_vref_1v8>;
};

